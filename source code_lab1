#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <string.h>

#define MAX_CHILDREN 10
#define MESSAGE_SIZE 256

void handle_interrupt(int signal_num);

int main() {
    pid_t pid[MAX_CHILDREN];
    int pipe_fd[MAX_CHILDREN][2];
    char message[MESSAGE_SIZE];
    int num_children = 0;
    int i, j;

    signal(SIGINT, handle_interrupt);

    for (i = 0; i < MAX_CHILDREN; i++) {
        if (pipe(pipe_fd[i]) < 0 || (pid[i] = fork()) < 0) {
            perror("Failed to create child process");
            exit(EXIT_FAILURE);
        } else if (pid[i] == 0) {
            close(pipe_fd[i][1]); // close write end of pipe
            while (1) {
                char buf[MESSAGE_SIZE];
                ssize_t bytes_read = read(pipe_fd[i][0], buf, MESSAGE_SIZE);
                if (bytes_read == -1) {
                    perror("Failed to read from pipe");
                    exit(EXIT_FAILURE);
                } else if (bytes_read == 0) {
                    printf("Child process %d exiting\n", i);
                    break;
                } else {
                    printf("Child process %d received message: %s\n", i, buf);
                }
            }
            close(pipe_fd[i][0]); // close read end of pipe
            exit(EXIT_SUCCESS);
        } else {
            close(pipe_fd[i][0]); // close read end of pipe
            num_children++;
        }
    }

    printf("Enter message to send to child processes:\n");
    if (fgets(message, MESSAGE_SIZE, stdin) == NULL) {
        perror("Failed to read user input");
        exit(EXIT_FAILURE);
    }

    for (j = 0; j < num_children; j++) {
        if (write(pipe_fd[j][1], message, strlen(message) + 1) == -1) {
            perror("Failed to write to pipe");
            exit(EXIT_FAILURE);
        }
    }

    for (i = 0; i < num_children; i++) {
        close(pipe_fd[i][1]); // close write end of pipe
        close(pipe_fd[i][0]); // close read end of pipe
        wait(NULL); // wait for child to exit
    }

    printf("All child processes have exited\n");
    return 0;
}

void handle_interrupt(int signal_num) {
    printf("Received interrupt signal (Ctrl+C). Exiting...\n");
    exit(EXIT_SUCCESS);
}
